# bot.py ‚Äî Telegram-–±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ–º–µ—Ü–∫–∏—Ö —Å–ª–æ–≤ —Å —Ç–µ—Å—Ç–∞–º–∏ TELC Lesen

import os
import csv
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# ----------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -----------------
TOKEN = "7876094199:AAEursuAwoRiLR_Byvb5O2lGkvqHlf3zMxU"
WORDS_DIR = "words"

# ----------------- –ü–æ–º–æ—â–Ω–∏–∫–∏ -----------------
def list_csv_files():
    files = [f for f in os.listdir(WORDS_DIR) if f.lower().endswith('.csv')]
    return sorted(files)

def load_words(filename):
    path = os.path.join(WORDS_DIR, filename)
    with open(path, encoding="utf-8") as f:
        reader = csv.reader(f, delimiter=';')
        return [(row[0].strip(), row[1].strip()) for row in reader if len(row) >= 2]

# ----------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ -----------------
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    files = list_csv_files()
    if not files:
        await update.message.reply_text("‚ùó –ù–µ—Ç CSV-—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    buttons = [
        [InlineKeyboardButton(f"{i+1}. {fname}", callback_data=f"test_{i}")]
        for i, fname in enumerate(files)
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç (–Ω–∞–±–æ—Ä —Å–ª–æ–≤):", reply_markup=InlineKeyboardMarkup(buttons))

async def choose_test(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not query.data.startswith("test_"):
        await query.edit_message_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    idx = int(query.data.replace("test_", ""))
    files = list_csv_files()
    if not (0 <= idx < len(files)):
        await query.edit_message_text("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    fname = files[idx]
    words = load_words(fname)
    if not words:
        await query.edit_message_text(f"‚ùó –§–∞–π–ª {fname} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        return

    selection = random.sample(words, min(10, len(words)))
    ctx.user_data["words"] = selection
    ctx.user_data["test_words"] = random.sample(selection, len(selection))
    ctx.user_data["pos"] = 0

    msg = "–ò–∑—É—á–∏ —ç—Ç–∏ —Å–ª–æ–≤–∞:\n"
    for wort, translation in selection:
        msg += f"{wort} ‚Äì {translation}\n"
    msg += "\n–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞), –Ω–∞–ø–∏—à–∏ /start_test"
    await query.edit_message_text(msg)

async def start_test(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if "test_words" not in ctx.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ /start!")
        return
    ctx.user_data["pos"] = 0
    await ask_word(update.effective_chat.id, ctx)

async def ask_word(chat_id: int, ctx: ContextTypes.DEFAULT_TYPE):
    pos = ctx.user_data.get("pos", 0)
    words = ctx.user_data.get("test_words", [])
    if pos >= len(words):
        await ctx.bot.send_message(chat_id, "üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
        return

    word = words[pos][0]
    await ctx.bot.send_message(chat_id, f"–ü–µ—Ä–µ–≤–µ–¥–∏: *{word}*", parse_mode="Markdown")

async def check_answer(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    pos = ctx.user_data.get("pos", 0)
    words = ctx.user_data.get("test_words", [])
    if pos >= len(words):
        return

    correct = words[pos][1]
    if text.lower() == correct.lower():
        await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: *{correct}*", parse_mode="Markdown")

    ctx.user_data["pos"] = pos + 1
    await ask_word(update.message.chat_id, ctx)

# ----------------- –ó–∞–ø—É—Å–∫ -----------------
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("start_test", start_test))
    app.add_handler(CallbackQueryHandler(choose_test))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_answer))

    app.run_polling()

if __name__ == "__main__":
    main()
